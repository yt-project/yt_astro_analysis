version: 2.1

commands:
  set-env:
    description: "Set environment variables."
    steps:
      - run:
          name:  "Set environment variables."
          command: |
            echo 'export GOLD_STANDARD=HEAD' >> $BASH_ENV
            echo 'export ROCKSTAR_DIR=$HOME/rockstar-galaxies' >> $BASH_ENV
            echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$ROCKSTAR_DIR' >> $BASH_ENV
            echo 'export YT_DIR=$HOME/yt-git' >> $BASH_ENV
            echo 'export YT_DATA=$HOME/yt_test' >> $BASH_ENV
            echo 'export TEST_DIR=$HOME/test_results' >> $BASH_ENV
            echo 'export TEST_NAME=astro_analysis' >> $BASH_ENV
            echo 'export TEST_FLAGS="--nologcapture -v --with-answer-testing --local --local-dir $TEST_DIR --answer-name=$TEST_NAME --answer-big-data"' >> $BASH_ENV

  install-dependencies:
    description: "Install dependencies."
    steps:
      - run:
          name: "Install dependencies."
          command: |
            sudo apt update
            sudo apt upgrade
            sudo apt install -y dvipng texlive-latex-extra
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython numpy
            pip install -e .[dev]

  install-with-yt-dev:
    description: "Install dependencies with yt from source."
    steps:
      - run:
          name: "Install dependencies with yt from source."
          command: |
            source $BASH_ENV
            sudo apt update
            sudo apt upgrade
            sudo apt install -y dvipng texlive-latex-extra
            sudo apt install -y libopenmpi-dev openmpi-bin gcc-9
            python3 -m venv $HOME/venv
            source $HOME/venv/bin/activate
            pip install --upgrade pip
            pip install --upgrade wheel
            pip install --upgrade setuptools
            pip install Cython mpi4py numpy
            export MAX_BUILD_CORES=2
            # install yt from source
            if [ ! -f $YT_DIR/README.md ]; then
                git clone --branch=main https://github.com/yt-project/yt $YT_DIR
            fi
            pushd $YT_DIR
            git pull origin main
            git checkout main
            pip install -e .
            popd
            # install rockstar
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
            if [ ! -f $ROCKSTAR_DIR/VERSION ]; then
                git clone https://bitbucket.org/pbehroozi/rockstar-galaxies $ROCKSTAR_DIR
                pushd $ROCKSTAR_DIR
                make lib
                popd
            fi
            echo $ROCKSTAR_DIR > rockstar.cfg
            # install yt_astro_analysis with extra dev dependencies
            pip install -e .[dev]
            # configure yt
            yt config set --global yt suppress_stream_logging True
            yt config set --global yt test_data_dir $YT_DATA
            yt config set --global yt log_level 30

  download-test-data:
    description: "Download test data."
    steps:
      - run:
          name: "Download test data."
          command: |
            if [ ! -f $YT_DATA/enzo_tiny_cosmology/DD0046/DD0046 ]; then
                source $BASH_ENV
                source $HOME/venv/bin/activate
                mkdir -p $YT_DATA
                girder-cli --api-url https://girder.hub.yt/api/v1 download 577c09480d7c6b0001ad5be2 $YT_DATA/enzo_tiny_cosmology
            fi

  lint:
    description: "Lint."
    steps:
      - run:
          name: "Lint."
          command: |
            source $BASH_ENV
            source $HOME/venv/bin/activate
            flake8 yt_astro_analysis

  build-and-test:
    description: "Build yt_astro_analysis and run tests."
    steps:
      - run:
          name: "Build yt_astro_analysis and run tests."
          command: |
            # tag the tip so we can get back there
            git tag tip
            source $BASH_ENV
            source $HOME/venv/bin/activate
            # generate answers if not cached
            if [ ! -f ${TEST_DIR}/${TEST_NAME}/${TEST_NAME} ]; then
              git checkout $GOLD_STANDARD
              pip install -e .
              nosetests $TEST_FLAGS --answer-store
            fi
            # return to tip and run comparison tests
            git checkout tip
            pip install -e .
            coverage run `which nosetests` $TEST_FLAGS
            # code coverage report
            codecov

  build-docs:
    description: "Test the docs build."
    steps:
      - run:
          name: "Test the docs build."
          command: |
            source $HOME/venv/bin/activate
            cd doc/source
            python -m sphinx -M html "." "_build" -W

executors:
  python:
    parameters:
      tag:
        type: string
        default: latest
    docker:
      - image: circleci/python:<< parameters.tag >>

jobs:
  run-tests:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/yt_astro_analysis

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: python-<< parameters.tag >>-dependencies-2021-22-10

      - install-with-yt-dev

      - save_cache:
          name: "Save dependencies cache"
          key: python-<< parameters.tag >>-dependencies-2021-22-10
          paths:
            - ~/.cache/pip
            - ~/venv
            - ~/yt-git
            - ~/rockstar-galaxies

      - restore_cache:
          name: "Restore test data cache."
          key: test-data-2021-23-03

      - download-test-data

      - save_cache:
          name: "Save test data cache."
          key: test-data-2021-23-03
          paths:
            - ~/yt_test

      - lint

      - restore_cache:
          name: "Restore test answers."
          key: python-<< parameters.tag >>-test-answers-2021-22-10

      - build-and-test

      - save_cache:
          name: "Save test answers cache."
          key: python-<< parameters.tag >>-test-answers-2021-22-10
          paths:
            - ~/test_results

  docs-test:
    parameters:
      tag:
        type: string
        default: latest
    executor:
      name: python
      tag: << parameters.tag >>

    working_directory: ~/yt_astro_analysis

    steps:
      - checkout
      - set-env

      - restore_cache:
          name: "Restore dependencies cache."
          key: python-<< parameters.tag >>-dependencies-2021-22-10

      - install-with-yt-dev

      - save_cache:
          name: "Save dependencies cache"
          key: python-<< parameters.tag >>-dependencies-2021-22-10
          paths:
            - ~/.cache/pip
            - ~/venv
            - ~/yt-git
            - ~/rockstar-galaxies

      - build-docs

workflows:
   version: 2

   normal-tests:
     jobs:
       - run-tests:
           name: "Python 3.7 tests"
           tag: "3.7.12"

       - run-tests:
           name: "Python 3.10 tests"
           tag: "3.10.0"

       - docs-test:
           name: "Test docs build"
           tag: "3.9.7"

   weekly:
     triggers:
       - schedule:
           cron: "0 0 * * 2"
           filters:
            branches:
              only:
                - main
     jobs:
       - run-tests:
           name: "Python 3.7 tests"
           tag: "3.7.12"

       - run-tests:
           name: "Python 3.8 tests"
           tag: "3.8.9"

       - run-tests:
           name: "Python 3.9 tests"
           tag: "3.9.7"

       - run-tests:
           name: "Python 3.10 tests"
           tag: "3.10.0"

       - docs-test:
           name: "Test docs build"
           tag: "3.9.7"
